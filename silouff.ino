#include <SPI.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include <Adafruit_SSD1306.h>
#include <RtcDS1302.h>
#include <ThreeWire.h>  
#include <ESP8266WiFi.h>
#include "ThingSpeak.h"

#define SCREEN_WIDTH 128 // Largura do display
#define SCREEN_HEIGHT 32 // Altura do display
#define SCREEN_ADDRESS 0x3C 
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);
#define TCAADDR 0x70
#define CS_PIN 15
#define BME_SCK 13
#define BME_MISO 12
#define BME_MOSI 11
#define BME_CS 10
#define SEALEVELPRESSURE_HPA (1013.25)
ThreeWire myWire(0,16,2);
RtcDS1302<ThreeWire> Rtc(myWire);
Adafruit_BME280 bme0;
Adafruit_BME280 bme1;
Adafruit_BME280 bme2;
Adafruit_BME280 bme3;

const char* ssid = "XXXXXXXX";  
const char* password = "XXXXXXXX"; 
WiFiClient  client;
unsigned long myChannelNumber = 1;
const char * myWriteAPIKey = "XXXXXXXXXXXX";
unsigned long lastTime = 0;
unsigned long timerDelay = 30000;
float t;

const unsigned char bitmap_bbb [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0x80, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xf8, 0x0f, 0x81, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x1f, 0xfe, 0x00, 0x07, 0xff, 0xff, 0x00, 0x00, 0xf8, 0x7f, 0xff, 0xff, 0xff, 
	0xff, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3e, 0x1f, 0xff, 0xff, 0xff, 
	0xff, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xfb, 0x00, 0x00, 0x9f, 0x8f, 0xff, 0xff, 0xff, 
	0xf0, 0x1f, 0xff, 0xff, 0xff, 0xfc, 0x07, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xc3, 0xff, 0xff, 0xff, 
	0xc1, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x07, 0xff, 0xf8, 0x00, 0x7c, 0x1f, 0xf1, 0xff, 0xff, 0xff, 
	0x83, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xf8, 0x00, 0x00, 0x7f, 0xf8, 0xff, 0xff, 0xff, 
	0x91, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x07, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xfc, 0x7f, 0xff, 0xff, 
	0x83, 0xff, 0xff, 0xe0, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 
	0xc0, 0xff, 0xfc, 0x03, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 
	0xe0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 
	0xf8, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 
	0xfe, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x03, 0xff, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 
	0xff, 0x80, 0x07, 0xff, 0xff, 0xe0, 0x7f, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x7f, 0xff, 
	0xff, 0xf0, 0x0f, 0xff, 0xff, 0xe0, 0x3f, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x3f, 0xff, 
	0xff, 0xfc, 0x0f, 0xff, 0xff, 0xc0, 0x3f, 0xf0, 0x03, 0xff, 0xff, 0xff, 0xff, 0x18, 0x1f, 0xff, 
	0xff, 0xf8, 0x1f, 0xff, 0xff, 0xe0, 0x3f, 0xfc, 0x03, 0xff, 0xff, 0xff, 0xff, 0x38, 0x07, 0xff, 
	0xff, 0xf8, 0x1f, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0x81, 0xff, 0x00, 0x7f, 0xff, 0x3c, 0x03, 0xff, 
	0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xc0, 0x00, 0x07, 0xff, 0x3c, 0x01, 0xff, 
	0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x03, 0xfe, 0x38, 0x00, 0xff, 
	0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x0f, 0xc1, 0xfe, 0x60, 0x00, 0x3f, 
	0xff, 0xe0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x0d, 0xfc, 0x40, 0x00, 0x1f, 
	0xff, 0xe0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x19, 0xf8, 0x80, 0x00, 0x0f, 
	0xff, 0xe0, 0x03, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0x00, 0x00, 0xf3, 0xf1, 0x00, 0x00, 0x07, 
	0xff, 0x00, 0x0f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0x38, 0x1f, 0x87, 0xe2, 0x00, 0x00, 0x03, 
	0xf8, 0x1f, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xbf, 0xf8, 0x1f, 0x84, 0x00, 0x00, 0x03, 
	0xe1, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xe0, 0x00, 0xfe, 0x18, 0x00, 0x00, 0x01, 
	0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x70, 0x00, 0x00, 0x01, 
	0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xe0, 0x00, 0x00, 0x00, 
	0x27, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xc0, 0x00, 0x00, 0x00, 
	0x27, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xe0, 0x7f, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xfc, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 
	0x80, 0x00, 0x00, 0x07, 0xff, 0xff, 0xfc, 0x01, 0xfc, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x00, 
	0xe0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0xf8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0x00, 0x00, 0x7f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x07, 0xe0, 0x7f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xe0, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0x80, 0x07, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x01, 
	0xfc, 0x00, 0x03, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x01, 
	0xf0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x01, 
	0xe0, 0x00, 0x01, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x03, 
	0xc0, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 
	0xc0, 0x00, 0x00, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x07, 
	0xe0, 0x00, 0x00, 0x7f, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x47, 
	0xf0, 0x00, 0x00, 0x1f, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f, 
	0xfc, 0x00, 0x00, 0x07, 0xfc, 0x18, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x1f, 
	0xff, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x3f, 
	0xff, 0xe0, 0x00, 0x00, 0x00, 0x7c, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x7f, 
	0xff, 0xff, 0x80, 0x00, 0x00, 0x3c, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x23, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x07, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x1f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff
};
//http://javl.github.io/image2cpp/
const int bitmap_allArray_LEN = 1;
const unsigned char* bitmap_allArray[1] = {
	bitmap_bbb
};

void tcaselect(uint8_t i) {
  if (i > 7) return;
 
  Wire.beginTransmission(TCAADDR);
  Wire.write(1 << i);
  Wire.endTransmission();  
}

void setup() {
  Serial.begin(9600);
  Wire.begin();
  Rtc.Begin();
   if (Rtc.GetIsWriteProtected()) {
     Rtc.SetIsWriteProtected(false);
   }
   if (!Rtc.GetIsRunning()) {
     Rtc.SetIsRunning(true);
   }
  RtcDateTime compiled = RtcDateTime(__DATE__, __TIME__);
  Rtc.SetDateTime(compiled);

  unsigned status;
  tcaselect(0);
     delay(20);
     status = bme0.begin(0x76);
  tcaselect(1);
     delay(20);
     status = bme1.begin(0x76);
  tcaselect(2);
     delay(20);
     status = bme2.begin(0x76);
  tcaselect(3);
     delay(20);
     status = bme3.begin(0x76);
  tcaselect(4);
     delay(20);
     display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS);
  
  WiFi.mode(WIFI_STA); 
  ThingSpeak.begin(client);
}

void loop() { 

  if ((millis() - lastTime) > timerDelay) {
    if(WiFi.status() != WL_CONNECTED){
      Serial.print("Attempting to connect");
      while(WiFi.status() != WL_CONNECTED) {
        WiFi.begin(ssid, password); 
        delay(5000);     
      } 
      Serial.println("\nConnected.");
    }
    tcaselect(0);
    t = bme0.readTemperature();

  int x = ThingSpeak.writeField(myChannelNumber, 1, t, myWriteAPIKey);     
       if(x == 200) {
         Serial.println("Channel update successful.");
       }
       else {
         Serial.println("Problem updating channel. HTTP error code " + String(x));
       }  
    lastTime = millis();
  }

  RtcDateTime now = Rtc.GetDateTime();
  display.clearDisplay();
  display.setTextSize(1); // Tamanho
  display.setTextColor(1); // Cor
  display.setCursor(56, 4); // Cursor pode ir de 0,0 a 128,32
  display.print("PET");
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(7, 15);
  display.print("Engenharia Agricola");
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(32, 25);
  display.print("e Ambiental");
  display.display();
  delay(5000);
  printValues0();
  delay(3000);
  printValues1();
  delay(3000);
  printValues2();
  delay(3000);
  printValues3();
  delay(3000);
  display.clearDisplay();
  display.drawBitmap(0, 0, bitmap_bbb, 128, 64, 1);
  display.display();
  delay(1000);
}

void printValues0() {
  RtcDateTime now = Rtc.GetDateTime();
  tcaselect(4);
  delay(500);
  display.display();
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(1, 1);
  display.print("BME 0");
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(65, 1);
  display.print(now.Day());
  display.print("/");
  display.print(now.Month());
  display.print(" ");
  display.print(now.Hour());
  display.print(":");
  display.print(now.Minute());
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(1, 15);
  tcaselect(0);
  delay(500);
  display.print(bme0.readTemperature());
  tcaselect(4);
  delay(500);
  display.print("C");
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(1, 25);
  tcaselect(0);
  delay(500);
  display.print(bme0.readAltitude(SEALEVELPRESSURE_HPA));
  tcaselect(4);
  delay(500);
  display.print("m");
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(65, 15);
  tcaselect(0);
  delay(500);
  display.print(bme0.readPressure() / 100.0F);
  tcaselect(4);
  delay(500);
  display.print("hPa");
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(65, 25);
  tcaselect(0);
  delay(500);
  display.print(bme0.readHumidity());
  tcaselect(4);
  delay(500);
  display.print("%");
  display.display();
}

void printValues1() {
  RtcDateTime now = Rtc.GetDateTime();
  tcaselect(4);
  delay(500);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(1, 1);
  display.print("BME 1");
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(65, 1);
  display.print(now.Day());
  display.print("/");
  display.print(now.Month());
  display.print(" ");
  display.print(now.Hour());
  display.print(":");
  display.print(now.Minute());
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(1, 15);
  tcaselect(1);
  delay(500);
  display.print(bme1.readTemperature());
  tcaselect(4);
  delay(500);
  display.print("C");
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(1, 25);
  tcaselect(1);
  delay(500);
  display.print(bme1.readAltitude(SEALEVELPRESSURE_HPA));
  tcaselect(4);
  delay(500);
  display.print("m");
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(65, 15);
  tcaselect(1);
  delay(500);
  display.print(bme1.readPressure() / 100.0F);
  tcaselect(4);
  delay(500);
  display.print("hPa");
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(65, 25);
  tcaselect(1);
  delay(500);
  display.print(bme1.readHumidity());
  tcaselect(4);
  delay(500);
  display.print("%");
  display.display();
}

void printValues2() {
  RtcDateTime now = Rtc.GetDateTime();
  tcaselect(4);
  delay(500);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(1, 1);
  display.print("BME 2");
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(65, 1);
  display.print(now.Day());
  display.print("/");
  display.print(now.Month());
  display.print(" ");
  display.print(now.Hour());
  display.print(":");
  display.print(now.Minute());
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(1, 15);
  tcaselect(2);
  delay(500);
  display.print(bme2.readTemperature());
  tcaselect(4);
  delay(500);
  display.print("C");
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(1, 25);
  tcaselect(2);
  delay(500);
  display.print(bme2.readAltitude(SEALEVELPRESSURE_HPA));
  tcaselect(4);
  delay(500);
  display.print("m");
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(65, 15);
  tcaselect(2);
  delay(500);
  display.print(bme2.readPressure() / 100.0F);
  tcaselect(4);
  delay(500);
  display.print("hPa");
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(65, 25);
  tcaselect(2);
  delay(500);
  display.print(bme2.readHumidity());
  tcaselect(4);
  delay(500);
  display.print("%");
  display.display();
}

void printValues3() {
  RtcDateTime now = Rtc.GetDateTime();
  tcaselect(4);
  delay(500);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(1, 1);
  display.print("BME 3");
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(65, 1);
  display.print(now.Day());
  display.print("/");
  display.print(now.Month());
  display.print(" ");
  display.print(now.Hour());
  display.print(":");
  display.print(now.Minute());
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(1, 15);
  tcaselect(3);
  delay(500);
  display.print(bme3.readTemperature());
  tcaselect(4);
  delay(500);
  display.print("C");
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(1, 25);
  tcaselect(3);
  delay(500);
  display.print(bme3.readAltitude(SEALEVELPRESSURE_HPA));
  tcaselect(4);
  delay(500);
  display.print("m");
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(65, 15);
  tcaselect(3);
  delay(500);
  display.print(bme3.readPressure() / 100.0F);
  tcaselect(4);
  delay(500);
  display.print("hPa");
  display.setTextSize(1);
  display.setTextColor(1);
  display.setCursor(65, 25);
  tcaselect(3);
  delay(500);
  display.print(bme3.readHumidity());
  tcaselect(4);
  delay(500);
  display.print("%");
  display.display();
  delay(5000);
}
